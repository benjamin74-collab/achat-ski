generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // garde une base NEON "shadow" non poolée
}

model Product {
  id          Int      @id @default(autoincrement())
  brand       String
  model       String
  season      String?
  category    String?
  gtin        String?  @unique
  slug        String   @unique
  attributes  Json?
  createdAt   DateTime @default(now())
  description String?  // ✅ correspond à la migration
  skus        Sku[]
  clicks      Click[]
  reviews     Review[]
  tests       EditorialTest[]
}

model Sku {
  id         Int     @id @default(autoincrement())
  product    Product @relation(fields: [productId], references: [id])
  productId  Int
  variant    String?
  gtin       String? @unique
  attributes Json?
  offers     Offer[]
}

model Merchant {
  id        Int     @id @default(autoincrement())
  name      String  @unique
  slug      String  @unique
  network   String?
  programId String?
  status    String?
  offers    Offer[]
}

model Offer {
  id            Int       @id @default(autoincrement())
  sku           Sku       @relation(fields: [skuId], references: [id])
  skuId         Int
  merchant      Merchant  @relation(fields: [merchantId], references: [id])
  merchantId    Int
  affiliateUrl  String
  priceCents    Int
  currency      String
  inStock       Boolean   @default(true)
  shippingCents Int?
  lastSeen      DateTime? @default(now())
  clicks        Click[]

  @@unique([skuId, merchantId])
}

model Click {
  id                BigInt   @id @default(autoincrement())
  offer             Offer    @relation(fields: [offerId], references: [id])
  offerId           Int
  product           Product  @relation(fields: [productId], references: [id])
  productId         Int
  priceCentsAtClick Int
  subId             String?
  ts                DateTime @default(now())
  referrer          String?
}

model Review {
  id         Int      @id @default(autoincrement())
  productId  Int
  rating     Int
  title      String
  body       String
  authorName String?
  sourceName String?
  sourceUrl  String?
  createdAt  DateTime @default(now())
  product    Product  @relation(fields: [productId], references: [id])

  @@index([productId])
  @@index([rating])
}

model EditorialTest {
  id          Int      @id @default(autoincrement())
  productId   Int
  title       String
  excerpt     String
  score       Float?
  sourceName  String
  sourceUrl   String
  publishedAt DateTime @default(now())
  product     Product  @relation(fields: [productId], references: [id])

  @@index([productId])
  @@index([publishedAt])
}
